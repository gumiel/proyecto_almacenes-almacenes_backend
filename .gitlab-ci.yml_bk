stages:
  - initial
  - dell_test
  - dell_developer
  - deploy
  - postman
  - dell
  - production
  - sonar
  - prueba

#variables:
#  URL_DB: ${URL_DB}
#  USER_DB: $USER_DB
#  PASS_DB: ${PASS_DB}

create_jar:
  stage: initial
  tags:
    - dell-almacen
  script:
    - mvn dependency:go-offline
    - mvn clean install -DskipTests
    - cp target/almacenes-0.0.1-SNAPSHOT.jar target/almacenes-0.0.1-SNAPSHOT_test.jar
  artifacts:
    name: "almacenes-0.0.1-SNAPSHOT.jar"
    paths:
      - ./target/almacenes-0.0.1-SNAPSHOT.jar
  only:
    - master

up_application_test:
  stage: dell_test
  tags:
    - dell-almacen
  script:
#    - chmod 777 -R ejecutar_almacenes_test.sh
#    - ./ejecutar_almacenes_test.sh/
    - mvn spring-boot:run -Dspring-boot.run.arguments="--server.port=8099" > app.log 2>&1 &
  only:
    - master
  needs:
    - create_jar

run_test_postman:
  stage: dell_test
  tags:
    - dell-almacen
  script:
    - newman run "https://api.getpostman.com/collections/36492379-9a197c75-2cf8-4463-af17-39661ee8b676?apikey=PMAK-6726d9deda5844000118b148-243bce3f9d5f9c8e6ce500de35ba920d40" --environment "https://api.getpostman.com/environments/36492379-af6f793c-1c81-4a6f-8966-5869c3aff7a3?apikey=PMAK-6726d9deda5844000118b148-243bce3f9d5f9c8e6ce500de35ba920d40" -r htmlextra --reporter-htmlextra-export ./recursos/Postman-Collection/report_postman.html
  artifacts:
    name: "Reporte HTML NEWMAN"
    paths:
      - ./recursos/Postman-Collection/report_postman.html
  only:
    - master
  needs:
    - up_application_test

deploy_production_dell:
  stage: production
  tags:
    - dellv1-almacen
  script:
    - mvn dependency:go-offline
    - mvn clean install -DskipTests
#    - mvn spring-boot:run > app.log 2>&1 &
    - chmod 777 -R ejecutar_almacenes.sh
    - ./ejecutar_almacenes.sh
    - mvn spring-boot:run -Dspring-boot.run.arguments="--server.port=8099 --spring.datasource.url=jdbc:postgresql://localhost:5432/gestion_almacenes_test" > app.log 2>&1 &
  only:
    - develop

deploy_production:
  stage: deploy
  tags:
    - digitalocean
  script:
#    - echo "Conectando a (${URL_DB}) con usuario ($USER_DB) y clave ($PASS_DB)."
#    - docker stop almacenes-container
#    - docker rm almacenes-container
#    - docker rmi spring-api-image
#    - docker build -t "spring-api-image" .
#    - docker compose up -d
#    - pkill -f almacenes-0.0.1-SNAPSHOT.jar
#    - $variable=$(ps aux | grep almacenes-0.0.1-SNAPSHOT.jar | grep -v grep | awk '{print $2}')
#    - kill $variable
    - mvn dependency:go-offline
    - mvn clean install -DskipTests
    - chmod 777 -R ejecutar_almacenes.sh
#    - chmod 777 -R ejecutar_almacenes_postman.sh
    - sudo ./ejecutar_almacenes.sh/
#    - ./ejecutar_almacenes_postman.sh
#    - java -jar ./target/almacenes-0.0.1-SNAPSHOT.jar --spring.profiles.active=production
#    - docker stop almacenes-container
#    - docker rm almacenes-container
#    - docker run -d -p 8081:8081 --name almacenes-container almacenes-app
  only:
    - digital


#    https://github.com/DannyDainton/newman-reporter-htmlextra
newman:
  stage: postman
  script:
    - echo "Iniciando pruebas de postman."
    - newman -v
    - newman run ./recursos/Postman-Collection/Newman_Almacenes_QA.postman_collection.json -e ./recursos/Postman-Collection/env-production.postman_environment.json -r htmlextra --reporter-htmlextra-export ./recursos/Postman-Collection/report_postman.html
  artifacts:
    name: "Reporte HTML NEWMAN"
    paths:
      - ./recursos/Postman-Collection/report_postman.html
  only:
    - develop-bk


job_2:
  stage: dell
  tags:
    - dell-almacen
  script:
    - echo "hola"
    - sudo docker rm -f almacenes-container-dev
    - sudo docker rm -f postgres-container-dev
    - sudo docker rmi spring-api-image
    - sudo docker compose -f docker-compose-dev.yml up -d

#    - docker stop almacenes-container
#    - docker rm almacenes-container
#    - docker rmi spring-api-image
#    - docker build -t "spring-api-image" .
#    - docker compose up -d
#    - pkill -f almacenes-0.0.1-SNAPSHOT.jar
#    - $variable=$(ps aux | grep almacenes-0.0.1-SNAPSHOT.jar | grep -v grep | awk '{print $2}')
#    - kill $variable
#    - mvn dependency:go-offline
#    - mvn clean install -DskipTests
#    - chmod 777 -R ejecutar_almacenes.sh
#    - ./ejecutar_almacenes.sh
#    - java -jar ./target/almacenes-0.0.1-SNAPSHOT.jar --spring.profiles.active=production
#    - docker stop almacenes-container
#    - docker rm almacenes-container
#    - docker run -d -p 8081:8081 --name almacenes-container almacenes-app
  only:
    - develop-bk

#clean_docker_test:
#  stage: dell_test
#  tags:
#    - dell-almacen
#  script:
#    - echo "clean docker test"
#    - |
#      CONTAINER_NAME="almacenes-container-test"
#      if docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep "$CONTAINER_NAME" > /dev/null; then
#          echo "El contenedor $CONTAINER_NAME está en ejecución."
#          docker rm -f almacenes-container-test
#          docker rm -f postgres-container-test
#          docker rmi spring-api-image
#      fi
#      docker compose -f docker-compose-test.yml up -d
#  only:
#    - develop
job_sonar:
  stage: sonar
  tags:
    - dell-almacen
  script:
    - mvn verify sonar:sonar -D sonar.token=sqa_a7aad90e075382d9bb34888bd7dfb9b3349a843e
  only:
    - sonar
